// Code generated by mockery v2.52.3. DO NOT EDIT.

package repository

import (
	entity "github.com/lokker96/grpc_project/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockExplorerRepository is an autogenerated mock type for the ExplorerRepository type
type MockExplorerRepository struct {
	mock.Mock
}

type MockExplorerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExplorerRepository) EXPECT() *MockExplorerRepository_Expecter {
	return &MockExplorerRepository_Expecter{mock: &_m.Mock}
}

// CreateDecision provides a mock function with given fields: decision
func (_m *MockExplorerRepository) CreateDecision(decision *entity.Decision) error {
	ret := _m.Called(decision)

	if len(ret) == 0 {
		panic("no return value specified for CreateDecision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Decision) error); ok {
		r0 = rf(decision)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExplorerRepository_CreateDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDecision'
type MockExplorerRepository_CreateDecision_Call struct {
	*mock.Call
}

// CreateDecision is a helper method to define mock.On call
//   - decision *entity.Decision
func (_e *MockExplorerRepository_Expecter) CreateDecision(decision interface{}) *MockExplorerRepository_CreateDecision_Call {
	return &MockExplorerRepository_CreateDecision_Call{Call: _e.mock.On("CreateDecision", decision)}
}

func (_c *MockExplorerRepository_CreateDecision_Call) Run(run func(decision *entity.Decision)) *MockExplorerRepository_CreateDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Decision))
	})
	return _c
}

func (_c *MockExplorerRepository_CreateDecision_Call) Return(_a0 error) *MockExplorerRepository_CreateDecision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExplorerRepository_CreateDecision_Call) RunAndReturn(run func(*entity.Decision) error) *MockExplorerRepository_CreateDecision_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: user
func (_m *MockExplorerRepository) CreateUser(user *entity.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExplorerRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockExplorerRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *entity.User
func (_e *MockExplorerRepository_Expecter) CreateUser(user interface{}) *MockExplorerRepository_CreateUser_Call {
	return &MockExplorerRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockExplorerRepository_CreateUser_Call) Run(run func(user *entity.User)) *MockExplorerRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *MockExplorerRepository_CreateUser_Call) Return(_a0 error) *MockExplorerRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExplorerRepository_CreateUser_Call) RunAndReturn(run func(*entity.User) error) *MockExplorerRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindMutualLike provides a mock function with given fields: userID, recipientUserID
func (_m *MockExplorerRepository) FindMutualLike(userID int, recipientUserID int) bool {
	ret := _m.Called(userID, recipientUserID)

	if len(ret) == 0 {
		panic("no return value specified for FindMutualLike")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(userID, recipientUserID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExplorerRepository_FindMutualLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMutualLike'
type MockExplorerRepository_FindMutualLike_Call struct {
	*mock.Call
}

// FindMutualLike is a helper method to define mock.On call
//   - userID int
//   - recipientUserID int
func (_e *MockExplorerRepository_Expecter) FindMutualLike(userID interface{}, recipientUserID interface{}) *MockExplorerRepository_FindMutualLike_Call {
	return &MockExplorerRepository_FindMutualLike_Call{Call: _e.mock.On("FindMutualLike", userID, recipientUserID)}
}

func (_c *MockExplorerRepository_FindMutualLike_Call) Run(run func(userID int, recipientUserID int)) *MockExplorerRepository_FindMutualLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockExplorerRepository_FindMutualLike_Call) Return(_a0 bool) *MockExplorerRepository_FindMutualLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExplorerRepository_FindMutualLike_Call) RunAndReturn(run func(int, int) bool) *MockExplorerRepository_FindMutualLike_Call {
	_c.Call.Return(run)
	return _c
}

// GetDecisionsForRecipientId provides a mock function with given fields: userID, liked
func (_m *MockExplorerRepository) GetDecisionsForRecipientId(userID int, liked *bool) ([]entity.Decision, error) {
	ret := _m.Called(userID, liked)

	if len(ret) == 0 {
		panic("no return value specified for GetDecisionsForRecipientId")
	}

	var r0 []entity.Decision
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *bool) ([]entity.Decision, error)); ok {
		return rf(userID, liked)
	}
	if rf, ok := ret.Get(0).(func(int, *bool) []entity.Decision); ok {
		r0 = rf(userID, liked)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Decision)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *bool) error); ok {
		r1 = rf(userID, liked)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExplorerRepository_GetDecisionsForRecipientId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDecisionsForRecipientId'
type MockExplorerRepository_GetDecisionsForRecipientId_Call struct {
	*mock.Call
}

// GetDecisionsForRecipientId is a helper method to define mock.On call
//   - userID int
//   - liked *bool
func (_e *MockExplorerRepository_Expecter) GetDecisionsForRecipientId(userID interface{}, liked interface{}) *MockExplorerRepository_GetDecisionsForRecipientId_Call {
	return &MockExplorerRepository_GetDecisionsForRecipientId_Call{Call: _e.mock.On("GetDecisionsForRecipientId", userID, liked)}
}

func (_c *MockExplorerRepository_GetDecisionsForRecipientId_Call) Run(run func(userID int, liked *bool)) *MockExplorerRepository_GetDecisionsForRecipientId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*bool))
	})
	return _c
}

func (_c *MockExplorerRepository_GetDecisionsForRecipientId_Call) Return(_a0 []entity.Decision, _a1 error) *MockExplorerRepository_GetDecisionsForRecipientId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExplorerRepository_GetDecisionsForRecipientId_Call) RunAndReturn(run func(int, *bool) ([]entity.Decision, error)) *MockExplorerRepository_GetDecisionsForRecipientId_Call {
	_c.Call.Return(run)
	return _c
}

// GetDecisionsForUserId provides a mock function with given fields: userID, liked
func (_m *MockExplorerRepository) GetDecisionsForUserId(userID int, liked *bool) ([]entity.Decision, error) {
	ret := _m.Called(userID, liked)

	if len(ret) == 0 {
		panic("no return value specified for GetDecisionsForUserId")
	}

	var r0 []entity.Decision
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *bool) ([]entity.Decision, error)); ok {
		return rf(userID, liked)
	}
	if rf, ok := ret.Get(0).(func(int, *bool) []entity.Decision); ok {
		r0 = rf(userID, liked)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Decision)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *bool) error); ok {
		r1 = rf(userID, liked)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExplorerRepository_GetDecisionsForUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDecisionsForUserId'
type MockExplorerRepository_GetDecisionsForUserId_Call struct {
	*mock.Call
}

// GetDecisionsForUserId is a helper method to define mock.On call
//   - userID int
//   - liked *bool
func (_e *MockExplorerRepository_Expecter) GetDecisionsForUserId(userID interface{}, liked interface{}) *MockExplorerRepository_GetDecisionsForUserId_Call {
	return &MockExplorerRepository_GetDecisionsForUserId_Call{Call: _e.mock.On("GetDecisionsForUserId", userID, liked)}
}

func (_c *MockExplorerRepository_GetDecisionsForUserId_Call) Run(run func(userID int, liked *bool)) *MockExplorerRepository_GetDecisionsForUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*bool))
	})
	return _c
}

func (_c *MockExplorerRepository_GetDecisionsForUserId_Call) Return(_a0 []entity.Decision, _a1 error) *MockExplorerRepository_GetDecisionsForUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExplorerRepository_GetDecisionsForUserId_Call) RunAndReturn(run func(int, *bool) ([]entity.Decision, error)) *MockExplorerRepository_GetDecisionsForUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetLikesCountByProfileId provides a mock function with given fields: profileID
func (_m *MockExplorerRepository) GetLikesCountByProfileId(profileID int) int64 {
	ret := _m.Called(profileID)

	if len(ret) == 0 {
		panic("no return value specified for GetLikesCountByProfileId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(profileID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockExplorerRepository_GetLikesCountByProfileId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLikesCountByProfileId'
type MockExplorerRepository_GetLikesCountByProfileId_Call struct {
	*mock.Call
}

// GetLikesCountByProfileId is a helper method to define mock.On call
//   - profileID int
func (_e *MockExplorerRepository_Expecter) GetLikesCountByProfileId(profileID interface{}) *MockExplorerRepository_GetLikesCountByProfileId_Call {
	return &MockExplorerRepository_GetLikesCountByProfileId_Call{Call: _e.mock.On("GetLikesCountByProfileId", profileID)}
}

func (_c *MockExplorerRepository_GetLikesCountByProfileId_Call) Run(run func(profileID int)) *MockExplorerRepository_GetLikesCountByProfileId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockExplorerRepository_GetLikesCountByProfileId_Call) Return(_a0 int64) *MockExplorerRepository_GetLikesCountByProfileId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExplorerRepository_GetLikesCountByProfileId_Call) RunAndReturn(run func(int) int64) *MockExplorerRepository_GetLikesCountByProfileId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDecision provides a mock function with given fields: userID, recipientUserId, liked
func (_m *MockExplorerRepository) UpdateDecision(userID int, recipientUserId int, liked bool) error {
	ret := _m.Called(userID, recipientUserId, liked)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDecision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, bool) error); ok {
		r0 = rf(userID, recipientUserId, liked)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExplorerRepository_UpdateDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDecision'
type MockExplorerRepository_UpdateDecision_Call struct {
	*mock.Call
}

// UpdateDecision is a helper method to define mock.On call
//   - userID int
//   - recipientUserId int
//   - liked bool
func (_e *MockExplorerRepository_Expecter) UpdateDecision(userID interface{}, recipientUserId interface{}, liked interface{}) *MockExplorerRepository_UpdateDecision_Call {
	return &MockExplorerRepository_UpdateDecision_Call{Call: _e.mock.On("UpdateDecision", userID, recipientUserId, liked)}
}

func (_c *MockExplorerRepository_UpdateDecision_Call) Run(run func(userID int, recipientUserId int, liked bool)) *MockExplorerRepository_UpdateDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(bool))
	})
	return _c
}

func (_c *MockExplorerRepository_UpdateDecision_Call) Return(_a0 error) *MockExplorerRepository_UpdateDecision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExplorerRepository_UpdateDecision_Call) RunAndReturn(run func(int, int, bool) error) *MockExplorerRepository_UpdateDecision_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExplorerRepository creates a new instance of MockExplorerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExplorerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExplorerRepository {
	mock := &MockExplorerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
